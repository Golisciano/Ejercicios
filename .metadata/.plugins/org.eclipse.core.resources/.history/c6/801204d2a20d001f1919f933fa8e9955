/*
 * Realizar un programa para resolver el siguiente problema: Un granjero, un lobo, una
gallina y un saco de maíz deben cruzar el río. Para ello se dispone de un bote con una
capacidad de dos ocupantes, el hombre (el único que sabe remar) y otro. Si de un lado
del rio se quedan solos el lobo y la gallina, el lobo se come a la gallina. Si en una orilla se
quedan solos la gallina y el maíz, la gallina se come al maíz.
 */
package EjEstructuraNivelAvanzado;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;

class Estado {
    int granjero, lobo, gallina, maiz; 

    public Estado(int granjero, int lobo, int gallina, int maiz) {
        this.granjero = granjero;
        this.lobo = lobo;
        this.gallina = gallina;
        this.maiz = maiz;
    }

    public boolean esValido() {

        return (gallina == maiz || gallina == lobo) ? false : true;
    }

    public String toString() {
        return "(" + granjero + ", " + lobo + ", " + gallina + ", " + maiz + ")";
    }
}
public class EjUno {

	    public static List<Estado> generarMovimientos(Estado estado) {
	        List<Estado> movimientos = new ArrayList<>();

	        if (estado.granjero == 0) {

	            movimientos.add(new Estado(1, 1 - estado.lobo, estado.gallina, estado.maiz));
	
	            movimientos.add(new Estado(1, estado.lobo, 1 - estado.gallina, estado.maiz));

	            movimientos.add(new Estado(1, estado.lobo, estado.gallina, 1 - estado.maiz));
	        } else { 

	            movimientos.add(new Estado(0, estado.lobo, estado.gallina, estado.maiz));
	        }

	        return movimientos;
	    }

	    public static void resolver() {
	        Queue<Estado> cola = new LinkedList<>();
	        Set<Estado> visitados = new HashSet<>();

	        Estado inicial = new Estado(0, 0, 0, 0);
	        cola.add(inicial);

	        while (!cola.isEmpty()) {
	            Estado estadoActual = cola.poll();

	            if (estadoActual.esValido()) {
	                System.out.println("Solución encontrada: " + estadoActual);
	                return;
	            }

	            if (!visitados.contains(estadoActual)) {
	                visitados.add(estadoActual);
	                List<Estado> movimientos = generarMovimientos(estadoActual);
	                for (Estado movimiento : movimientos) {
	                    cola.add(movimiento);
	                }
	            }
	        }

	        System.out.println("No se encontró solución.");
	    }

	    public static void main(String[] args) {
	        resolver();
	    }
	}

