/*
 * Realizar un programa para resolver el siguiente problema: Un granjero, un lobo, una
gallina y un saco de maíz deben cruzar el río. Para ello se dispone de un bote con una
capacidad de dos ocupantes, el hombre (el único que sabe remar) y otro. Si de un lado
del rio se quedan solos el lobo y la gallina, el lobo se come a la gallina. Si en una orilla se
quedan solos la gallina y el maíz, la gallina se come al maíz.
 */
package EjEstructuraNivelAvanzado;

import java.util.HashSet;
import java.util.Stack;

public class EjUno {

	    static class Estado {
	        int granjero; 
	        int lobo;
	        int gallina;
	        int maiz;

	        public Estado(int granjero, int lobo, int gallina, int maiz) {
	            this.granjero = granjero;
	            this.lobo = lobo;
	            this.gallina = gallina;
	            this.maiz = maiz;
	        }

	        public boolean esValido() {
	            if (lobo == gallina && granjero != gallina) 
	                return false;
	            if (gallina == maiz && granjero != gallina) 
	                return false;
	            return true;
	        }

	        public boolean esObjetivo() {
	            return granjero == 1 && lobo == 1 && gallina == 1 && maiz == 1;
	        }

	        public void imprimir() {
	            System.out.println("Granjero: " + (granjero == 0 ? "Izquierda" : "Derecha"));
	            System.out.println("Lobo: " + (lobo == 0 ? "Izquierda" : "Derecha"));
	            System.out.println("Gallina: " + (gallina == 0 ? "Izquierda" : "Derecha"));
	            System.out.println("Maiz: " + (maiz == 0 ? "Izquierda" : "Derecha"));
	            System.out.println();
	        }
	    }

	    public static void busquedaProfundidad() {
	        Stack<Estado> pila = new Stack<>();
	        HashSet<Estado> visitados = new HashSet<>();
	        Estado inicial = new Estado(0, 0, 0, 0);
	        pila.push(inicial);

	        while (!pila.isEmpty()) {
	            Estado estadoActual = pila.pop();

	            if (estadoActual.esObjetivo()) {
	                System.out.println("Solución encontrada:");
	                estadoActual.imprimir();
	                return;
	            }

	            for (int i = 0; i <= 1; i++) {
	                for (int j = 0; j <= 1; j++) {
	                    for (int k = 0; k <= 1; k++) {
	                        for (int l = 0; l <= 1; l++) {
	                            Estado nuevoEstado = new Estado(i, j, k, l);
	                            if (!visitados.contains(nuevoEstado) && nuevoEstado.esValido()) {
	                                pila.push(nuevoEstado);
	                                visitados.add(nuevoEstado);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        System.out.println("No se encontró solución.");
	    }

	    public static void main(String[] args) {
	        busquedaProfundidad();
	    }
	}

